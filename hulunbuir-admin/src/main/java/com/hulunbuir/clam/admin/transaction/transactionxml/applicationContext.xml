<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        配置数据源，数据库连接池
    -->
    <bean id="dataSources" class="com.alibaba.druid.pool.DruidDataSource">
        <!--驱动器-->
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <!--链接URL-->
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/spring?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <!--
        注入service，dao
    -->
    <bean id="userDao" class="com.hulunbuir.clam.admin.transaction.transactionxml.IUserDaoImpl">
        <!--注入数据库-->
        <property name="dataSource" ref="dataSources"/>
    </bean>
    <bean id="userService" class="com.hulunbuir.clam.admin.transaction.transactionxml.IUserServiceImpl">
        <!--注入dao层-->
        <property name="userDao" ref="userDao"/>
    </bean>

    <!--
        配置事务管理器
    -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSources"/>
    </bean>

    <!--
        配置事务的切面类
    -->
    <tx:advice id="myAdvice" transaction-manager="txManager" >
        <!--配置对那个方法进行事务的管理-->
        <tx:attributes>
            <!--
            方法名，
            事务的传播行为，
                PROPAGATION_REQUIRED ———— 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
                PROPAGATION_SUPPORTS ———— 支持当前事务，如果当前没有事务，就以非事务方式执行。
                PROPAGATION_MANDATORY ———— 支持当前事务，如果当前没有事务，就抛出异常。
                PROPAGATION_REQUIRES_NEW ———— 新建事务，如果当前存在事务，把当前事务挂起。
                PROPAGATION_NOT_SUPPORTED ———— 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
                PROPAGATION_NEVER ———— 以非事务方式执行，如果当前存在事务，则抛出异常。
                PROPAGATION_NESTED ———— 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
            事务的隔离级别ACID，
                SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。
                Read Uncommitted（读取未提交内容）

                在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。
                Read Committed(读取提交内容)

                这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），
                因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。
                Repeatable Read(可重读)
                这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。
                简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。
                InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。

                Serializable(可串行化)
                这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。

                这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。

            -->
            <tx:method name="transfer" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--
        配置事务的aop
    -->
    <aop:config>
        <!--切面表达式，，用于扫描-->
        <aop:advisor advice-ref="myAdvice" pointcut="execution( * com.example.jack.utils.readme.transaction.transactionxml..*.*(..))"/>
    </aop:config>

</beans>