CentOS7默认数据库是mariadb,配置等用着不习惯,因此决定改成mysql,但是CentOS7的yum源中默认好像是没有mysql的。为了解决这个问题，我们要先下载mysql的repo源。
wBcysCEFQ5qs4P2
1.下载mysql的repo源

	yum install wget
$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm

mysql-community-server-5.6.41-2.el7.x86_64


2.安装mysql-community-release-el7-5.noarch.rpm包

$ sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm

安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo。

3.安装mysql

$ sudo yum install mysql-server -y

根据提示安装就可以了,不过安装完成后没有密码,需要重置密码

4.重置mysql密码

$ mysql -u root

登录时有可能报这样的错：ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：

$ sudo chown -R root:root /var/lib/mysql

chown -R mysql:mysql /var/lib/mysql

重启mysql服务

$ service mysqld restart

接下来登录重置密码：

$ mysql -u root  //直接回车进入mysql控制台
mysql > use mysql;
mysql > update user set password=password('123456') where user='root';
mysql > exit;

update user set password = '123456' where user='root';


SHOW VARIABLES LIKE 'validate_password%';
set global validate_password_policy=LOW;
set global validate_password_length=6;
关于 mysql 密码策略相关参数；
1）、validate_password_length  固定密码的总长度；
2）、validate_password_dictionary_file 指定密码验证的文件路径；
3）、validate_password_mixed_case_count  整个密码中至少要包含大/小写字母的总个数；
4）、validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；
5）、validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM；
关于 validate_password_policy 的取值：
0/LOW：只验证长度；
1/MEDIUM：验证长度、数字、大小写、特殊字符；
2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；
6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；

ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';

mysql -V 查看mysql安装版本；

1.当然，如果想给所有ip都赋予权限，则这样：

grant all privileges on *.* to 'root'@'%' identified by '123456';

3.使授权立即生效

flush privileges;

======================================================================================================================================================================================

链接：http://orchome.com/238

1、安装

查看有没有安装过：

yum list installed mysql*
rpm -qa | grep mysql*
查看有没有安装包：

yum list mysql*
安装mysql客户端：

yum install mysql
安装mysql 服务器端：

yum install mysql-server

yum install mysql-devel
2、启动&&停止

数据库字符集设置

mysql配置文件/etc/my.cnf中加入default-character-set=utf8
启动mysql服务：

service mysqld start或者/etc/init.d/mysqld start
开机启动：
必须进入目录：/etc/init.d/
chkconfig mysqld on

chkconfig --add mysqld，查看开机启动设置是否成功chkconfig --list | grep mysql*

mysqld   0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭

停止：
service mysqld stop
3、登录

创建root管理员：

mysqladmin -u root password 123456
登录：

mysql -u root -p 按回车后：输入密码即可。
忘记密码：

service mysqld stop

mysqld_safe --user=root --skip-grant-tables

mysql -u root

use mysql

update user set password=password("new_pass") where user="root";

flush privileges;

查看刚安装mysql数据库版本信息。

输入：rpm -qi mysql-server
4、远程访问

开放防火墙的端口号

mysql增加权限：mysql库中的user表新增一条记录host为“%”，user为“root”。

grant all privileges on *.* to 'root'@'%' identified by '123456';
5、Linux MySQL的几个重要目录

数据库目录

/var/lib/mysql/
配置文件

/usr/share /mysql（mysql.server命令及配置文件）
相关命令

/usr/bin（mysqladmin mysqldump等命令）
启动脚本

/etc/rc.d/init.d/（启动脚本文件mysql的目录）

以下为安装成功之后的mysql，会在控制台打印的目录以及说明

=========================================================================================================
To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:
请记住为MySQL根用户设置密码！
为此，启动服务器，然后发出以下命令：

/usr/bin/mysqladmin -u root password 'new-password'
/usr/bin/mysqladmin -u root -h VM_0_9_centos password 'new-password'

Alternatively you can run:
/usr/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:
cd /usr ; /usr/bin/mysqld_safe &

You can test the MySQL daemon with mysql-test-run.pl
cd /usr/mysql-test ; perl mysql-test-run.pl

Please report any problems with the /usr/bin/mysqlbug script!
=================


systemctl status mysqld.service

systemctl restart mysqld.service

ps -aux|grep mysql

ps aux | grep mysqld

ps aux | grep mysqld

service mysqld status

=============================================================================================================================================================
===============================================================================================================================================================================
=================以上文档全部为linux上安装mysql==============================================================================================================================
==============================================================================================================================================================================
==============================================================================================================================================================================
====================================================================================================================================================================================
linux上安装jdk1.8
1、在/usr目录下创建java目录；

2、下载jdk.rpm安装包，网址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

2.1、查看当前linux系统是32位还是64位系统：
	 查看jdk版本和Linux版本位数是否一致。
sudo uname --m
i686 //表示是32位
x86_64 // 表示是64位；

3、jdk-8u181-linux-x64.rpm  点击下载；

4、上传到 /usr/java  目录；

5、使用命令  rpm -ivh jdk-8u181-linux-x64.rpm  进行安装；
/usr/java/jdk1.8.0_60_amd64/bin/java
6、安装完成之后，配置变量

vim /etc/profile
添加如下内容：JAVA_HOME根据实际目录来（在文件最下面添加）
export JAVA_HOME=/usr/java/jdk1.8.0_181-amd64
export CLASSPATH=$JAVA_HOME/lib/
export PATH=$PATH:$JAVA_HOME/bin
export PATH JAVA_HOME CLASSPATH

7、source /etc/profile
 执行 . /etc/profile 使用配置生效
	  source /etc/profile

 检测java环境变量是否生效
 echo $JAVA_HOME

8、验证安装成功，javac -version
================================================================================================================================================================================================================================================================================================================================================================
==========================================================================================================================================================
linux上安装redis
安装：

1.获取redis资源
	进入 /usr/local 目录 执行以下命令：
　　wget http://download.redis.io/releases/redis-4.0.8.tar.gz

2.解压

　　tar xzvf redis-4.0.8.tar.gz

3.安装

	mv redis-4.0.8 redis

　　cd redis

　　make

　　cd src

　　make install PREFIX=/usr/local/redis

4.移动配置文件到安装目录下

　　cd ../

　　mkdir /usr/local/redis/etc

　　mv redis.conf /usr/local/redis/etc

 5.配置redis为后台启动

　　vi /usr/local/redis/etc/redis.conf //将daemonize no 改成daemonize yes

	修改 #bind 127.0.0.1  改成 bind 127.0.0.1 修改至 所有的IP地址都能访问

	默认是无密码的  requirepass foobared    requirepass 123456


6.将redis加入到开机启动

　　vi /etc/rc.local //在里面添加内容：/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf (意思就是开机调用这段开启redis的命令)

7.开启redis

　　/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf



常用命令　　`/usr/redis/redis/src'


　　redis-server /usr/local/redis/etc/redis.conf //启动redis

　　pkill redis  //停止redis

　　卸载redis：

　　　　rm -rf /usr/local/redis //删除安装目录

　　　　rm -rf /usr/bin/redis-* //删除所有redis相关命令脚本

　　　　rm -rf /root/download/redis-4.0.4 //删除redis解压文件夹





 ps -ef |grep redis   检查后台进程是否正在运行

 netstat -lntp | grep 6379
 lsof -i :6379
 　/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT

　　/etc/rc.d/init.d/iptables save


================================================================================================================================================================
 redis安装

tar zxvf redis-2.8.9.tar.gz
cd redis-2.8.9
#直接make 编译
make
#可使用root用户执行`make install`，将可执行文件拷贝到/usr/local/bin目录下。这样就可以直接敲名字运行程序了。
make install
启动

1
./redis-server &
检测

#检测后台进程是否存在
ps -ef |grep redis

#检测6379端口是否在监听
netstat -lntp | grep 6379

 netstat -tunpl|grep 6379

 /sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT

 /etc/rc.d/init.d/iptables save


#使用`redis-cli`客户端检测连接是否正常
./redis-cli
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> set key "hello world"
OK
127.0.0.1:6379> get key
"hello world"
　停止


#使用客户端
redis-cli shutdown
#因为Redis可以妥善处理SIGTERM信号，所以直接kill -9也是可以的
kill -9 PID
　通过指定配置文件启动

可为redis服务启动指定配置文件，配置文件 redis.conf 在Redis根目录下。


#修改daemonize为yes，即默认以后台程序方式运行（还记得前面手动使用&号强制后台运行吗）。
daemonize no
#可修改默认监听端口
port 6379
#修改生成默认日志文件位置
logfile "/home/futeng/logs/redis.log"
#配置持久化文件存放位置
dir /home/futeng/data/redisData
启动时指定配置文件

redis-server ./redis.conf
#如果更改了端口，使用`redis-cli`客户端连接时，也需要指定端口，例如：
redis-cli -p 6380
　他启停同 直接启动 方式。配置文件是非常重要的配置工具，随着使用的逐渐深入将显得尤为重要，推荐在一开始就使用配置文件。

启动脚本
推荐在生产环境中使用启动脚本方式启动redis服务。启动脚本redis_init_script 位于位于Redis的 /utils/ 目录下。

　

#大致浏览下该启动脚本，发现redis习惯性用监听的端口名作为配置文件等命名，我们后面也遵循这个约定。
#redis服务器监听的端口
REDISPORT=6379
#服务端所处位置，在make install后默认存放与`/usr/local/bin/redis-server`，如果未make install则需要修改该路径，下同。
EXEC=/usr/local/bin/redis-server
#客户端位置
CLIEXEC=/usr/local/bin/redis-cli
#Redis的PID文件位置
PIDFILE=/var/run/redis_${REDISPORT}.pid
#配置文件位置，需要修改
CONF="/etc/redis/${REDISPORT}.conf"
　　

配置环境
1. 根据启动脚本要求，将修改好的配置文件以端口为名复制一份到指定目录。需使用root用户。


mkdir /etc/redis
cp redis.conf /etc/redis/6379.conf
2. 将启动脚本复制到/etc/init.d目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。

1
cp redis_init_script /etc/init.d/redisd
 3.  设置为开机自启动

此处直接配置开启自启动 chkconfig redisd on 将报错误： service redisd does not support chkconfig
参照 此篇文章 ，在启动脚本开头添加如下两行注释以修改其运行级别：

#!/bin/sh
# chkconfig:   2345 90 10
# description:  Redis is a persistent key-value database
#
 再设置即可成功。


#设置为开机自启动服务器
chkconfig redisd on
#打开服务
service redisd start
#关闭服务
service redisd stop
-----------------------------------------最靠谱的redis安装教程
1、将下载好的redis压缩包（redis-4.0.8.tar.gz）放在linux的：/usr/local/   目录下；
2、然后使用命令：tar -zxvf redis的压缩包；
3、然后进入redis-4.0.8目录下，执行命令：make，执行完之后；
4、vim redis.conf
将
1、   bind 127.0.0.1   -->改为：#127.0.0.1（注释掉）
2、   daemonize no     -->改为：daemonize yes
3、   #requirepass foobared    -->改为：requirepass 1234567（这里为设置密码，可随意输入）

按下esc键，:wq   保存并退出；

5、然后进入src目录下，执行命令：./redis-server ../redis.conf
便会出现：
29897:C 08 Jan 22:17:48.090 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
29897:C 08 Jan 22:17:48.091 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=29897, just started
29897:C 08 Jan 22:17:48.091 # Configuration loaded

说明执行成功；
6、然后执行命令：  ps -ef | grep redis
便会出现：
root     29898     1  0 22:17 ?        00:00:00 ./redis-server *:6379
root     29983   392  0 22:18 pts/1    00:00:00 grep --color=auto redis
7、然后执行命令：
/sbin/iptables -L -n
用于查看当前linux服务器是否打开6379端口号
如果没有打开，则找百度。搜索“linux添加可访问的端口”

---------------
===================================================================================================================================================================================
==========================================================================================================================================================================
linux上tomcat使用IP地址访问项目
配置tomcat环境，部署web项目，运行java WEB项目：

1、将项目的war包放入，tomcat的webapp目录下，运行一次tomcat，将war包解压到webAPP目录下，进入项目解压目录，/home/tomcat/webapps/web-king

2、在tomcat的conf目录下的，server.xml，修改 Host 标签中的内容，
添加以下内容：（目的是在访问的时候不需要项目名称）

<Context path="/" docBase="/home/tomcat/webapps/web-king" reloadable="false" allowLinking="true"></Context>


3、通过ip地址加端口号，项目访问路径，
http://132.232.152.117:8080/index.jsp




===============================================================
 使用东京的服务器搭建翻墙服务器：
 1、在https://my.vultr.com/ 官网上注册一个账户，并使用支付宝充值10美元，
 2、我是在2018.9.23购买的， 每月10美元，人民币66.68元。
	购买东京的服务器，购买成功之后会给你最高权限的root，及密码。
 3、使用xshell链接这个服务器，并链接登录成功之后。
 4、开始安装shadowsocks服务端
 5、yum install wget
 6、wget --no-check-certificate te https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh -->(就是在安装shadowsocks服务端)

 7、chmod +x shadowsocks.sh -->(给shadowsocks赋予当前用户权限)

 8、./shadowsocks.sh 2>& 2>&1 | tee ee shadowsocks.log  -->(设置日志所在的地方)


 9、安装成功之后：
 会出现类似于这样的一段英文：
	Congratulations, your_shadowsocks_version install completed!
	Your Server IP        :your_server_ip
	Your Server Port      :your_server_port
	Your Password         :your_password
	Your Encryption Method:your_encryption_method

	Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)
	 ss://your_encryption_method:your_password@your_server_ip:your_server_port
	Your QR Code has been saved as a PNG file path:
	 your_ur_path.png

	We

	Welcome to visit:it:https://teddysun.com/486.html
	Enj
	Enjoy it!

 然后安装shadowsocks的windows客户端、安卓手机客户端、

 ===========================================================================================================================================================================

 linux上安装maven

 1、安装wget命令
如果需要通过使用wget命令，直接通过网络下载maven安装包时，需要在linux系统中安装wget命令。
yum -y install wget
2、下载maven安装包
wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz
3、解压缩maven

tar -zxvf apache-maven-3.5.2-bin.tar.gz

我这里将maven解压缩之后的路径为：/var/local

4、配置maven环境变量

vi /etc/profile

添加环境变量

/usr/local/maven/maven-3.6.2

export MAVEN_HOME=/usr/local/maven/maven-3.6.2
export PATH=$PATH:$MAVEN_HOME/bin


export PATH=${MAVEN_HOME}/bin:${PATH}

export MAVEN_HOME=/usr/maven-3.5.4
export MAVEN_HOME
export PATH=$PATH:$MAVEN_HOME/bin

编辑之后记得使用source /etc/profile命令是改动生效。

5、验证结果

mvn -v

===========================================================================================================================================================================

 windows上安装nexus3.14oss服务，-->maven私服
 1、下载Nexus Repository Manager OSS 3.x -  Windows版本
   https://www.sonatype.com/download-oss-sonatype

 2、下载完成，并解压成功之后，
 首先将nexus-3.14.0-04-win64\nexus-3.14.0-04   配置成为nexus的环境变量，
  进入--》nexus-3.14.0-04-win64\nexus-3.14.0-04\bin
 在该目录下 按下 “shift+鼠标右键” 在弹框中选择   “在此处打开Powershell窗口”

 3、使用命令
nexus.exe /install <optional-service-name> #安装
nexus.exe /start <optional-service-name> #开始
nexus.exe /stop <optional-service-name> #结束
nexus.exe /uninstall <optional-service-name> #卸载
#其中<optional-service-name>为服务的名称，可自定义
 输入命令：.\nexus /run 运行
注：如果出现错误：java.lang.NumberFormatException: null，则可能是jdk版本不对，或路径中带中文

 D:\Softwares\nexus-3.9.0-01-win64\nexus-3.9.0-01\bin>net start nexus //启动nexus服务
nexus 服务已经启动成功
D:\Softwares\nexus-3.9.0-01-win64\nexus-3.9.0-01\bin\bin>net stop nexus  //关闭nexus服务
nexus 服务正在停止..
nexus 服务已经成功停止



4、访问浏览器（http://127.0.0.1:8081） -->nexus的默认端口号
访问成功时候那么本地的nexus搭建成功；

hosted（宿主仓库库）

存放本公司开发的jar包（正式版本、测试版本）

proxy（代理仓库）

代理中央仓库、Apache下测试版本的jar包

group（组仓库）

使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）

virtual (虚拟仓库)

基本用不到，重点关注上面三个仓库的使用


Maven用到的Repositories说明：

maven-central：maven中央库，默认从https://repo1.maven.org/maven2/拉取jar

maven-releases：私库发行版jar

maven-snapshots：私库快照（调试版本）jar

maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地maven基础配置settings.xml中使用。


用途：指定私服的中央地址、将自己的Maven项目指定到私服地址、从私服下载中央库的项目索引、从私服仓库下载依赖组件、将第三方项目jar上传到私服供其他项目组使用
   仓库：
　　　　　　hosted   类型的仓库，内部项目的发布仓库　

　　　　　　releases 内部的模块中release模块的发布仓库

　　　　　　snapshots 发布内部的SNAPSHOT模块的仓库　　

　　　　　　3rd party 第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去　

　　　　　　proxy   类型的仓库，从远程中央仓库中寻找数据的仓库

　　　　　　group   类型的仓库，组仓库用来方便我们开发人员进行设置的仓库


Linux上搭建nexus服务：
 1、下载Nexus
 首先创建nexus目录，
 进入/usr   创建nexus 和子文件夹unixnexus
 wget -P /usr/local http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz
 也可以将： http://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.6.0-02-unix.tar.gz
 直接在浏览器的地址栏打开，下载完成之后上传到linux的 /usr/nexus/unixnexus   目录下

 2、创建安装nexus的用户以及目录

 首先创建一个专属用户nexus来做所有与nexus服务器相关的操作，这样对系统带来的影响也是局部的

下面是创建名称为nexus的用户的命令，将其家目录设置为/usr/nexus，-m参数在所设置的家目录不存在的情况下自动创建

useradd nexus -d /usr/nexus -m


如此一来就可以切换到nexus用户来执行操作了，将nexus私服的目录放置在nexus用户的家目录下，这样一来就省去了很多麻烦，好处多多，大家以后会有所体会的。

3、 解压
 tar -zxvf nexus-3.6.0-02-unix.tar.gz -C /usr/nexus/nexus-3.6    //解压缩到nexus文件夹（其中包含nexus-3.6.0-02和sonatype-work）

 4、修改nexus的默认端口号：

 cd /usr/nexus/nexus-3.6/nexus-3.6.0-02/etc

 vi
 5、

export NEXUS_HOME=/usr/nexus/nexus-3.6
export PATH=$PATH:$NEXUS_HOME/bin


==========================================================================================================================================================================

nohup java -jar jack-0.0.1-SNAPSHOT.jar >/WebServer/logs/catalina.out 2>&1 &
运行springboot项目

 1. linux上后台启动项目： nohup java -jar jack-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod >/home/springBootWeb/logscatalina.2018-11-25.log 2>&1 &

 2.查看是否运行 jobs -l

 3.jobs -l 可以看到后台运行起来的进程；

 4.kill -9 进程id ，停用服务。



==================================================================================================================================================================

 https://gitlab.com/qjyn1314/jack.git

 linux下手动安装git教程
Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。而国外的GitHub和国内的Coding都是项目的托管平台。但是在使用git工具的时候，第一步要学会如何安装git，本教程就手把手教大家如何手动编译安装git。

1、介绍

　　使用Coding管理项目，上面要求使用的git版本为1.8.0以上，而很多yum源上自动安装的git版本为1.7，所以需要掌握手动编译安装git方法。

2、安装git依赖包

　　yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker

3、删除已有的git

　　yum remove git

4、下载git源码

　　切换到你的包文件存放目录下

　　　　cd /usr/src

　　下载git安装包

　　　　wget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz
　　　　wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz

　　解压git安装包

　　　　tar -zxvf git-2.8.3.tar.gz

　　　　cd git-2.8.3

　　配置git安装路径

　　　　./configure prefix=/usr/local/git/

　　编译并且安装

　　　　make && make install

　　

5、将git指令添加到bash中

　　vi /etc/profile

　　在最后一行加入

export PATH=$PATH:/usr/local/git/git-2.9.5/bin
export PATH=$PATH:/usr/local/git/gitinstall/bin


/usr/local/git/git-2.9.5/bin


　　让该配置文件立即生效

　　source /etc/profile

6、
 查看git版本号

　　git --version

　　git已经安装完毕

=======================================================================================================================================================================================

 Linux下 保存 git账号密码
一、通过文件方式

1.在~/下， touch创建文件 .git-credentials, 用vim编辑此文件，输入内容格式：

touch .git-credentials
vim .git-credentials
在里面按“i”然后输入： https://{username}:{password}@github.com

比如 https://account:password@github.com

2. 在终端下执行

git config --global credential.helper store
3. 可以看到~/.gitconfig文件，会多了一项：

[credential]
helper = store
4.OK

================================================================================ ==================================================================================================


 安装NGINX：

#nexus
export NEXUS_HOME=/usr/local/nginx
export PATH=$PATH:$NEXUS_HOME/sbin
RUN_AS_USER=root




 /usr/local/nginx/sbin


 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module





====================================================================================================================================================================================

自动化部署脚本
netstat -ntpl|grep java


cp /usr/local/git/gitproject/jack/web-jack/target/jack-0.0.1-SNAPSHOT.jar /home/project/


echo "启动脚本"
cd /usr/local/git/gitproject/jack/
echo "进入【/usr/local/git/gitproject/jack/】目录拉取最新的代码"
git pull
echo "进行项目编译【mvn clean install -U】"
mvn clean install -U
echo "进入【target】目录"
cd web-jack/target/
echo "将原有的【web-jack】项目删除"
rm -rf /home/project/jack-0.0.1-SNAPSHOT.jar
echo "将刚刚编译通过的【web-jack】项目拷贝到【/home/project/】"
cp jack-0.0.1-SNAPSHOT.jar /home/project/
echo "将原来的项目停止"


echo "启动项目并将其启动为后台运行项目"
nohup java -jar jack-0.0.1-SNAPSHOT.jar >/home/project/logs/catalina.out 2>&1 &
echo "查看启动日志"
tail -f /home/project/logs/catalina.out



====================================================================================================================================================================================
  linux安装RabbitMQ

一、RabbitMQ概念
RabbitMQ是流行的开源消息队列系统，是AMQP（Advanced Message Queuing Protocol高级消息队列协议）的标准实现，用erlang语言开发。RabbitMQ据说具有良好的性能和时效性，同时还能够非常好的支持集群和负载部署，非常适合在较大规模的分布式系统中使用。

消息中间件的工作过程可以用生产者消费者模型来表示.即,生产者不断的向消息队列发送信息,而消费者从消息队列中消费信息.具体过程如下:

从上图可看出,对于消息队列来说,生产者,消息队列,消费者是最重要的三个概念,生产者发消息到消息队列中去,消费者监听指定的消息队列,并且当消息队列收到消息之后,接收消息队列传来的消息,并且给予相应的处理.消息队列常用于分布式系统之间互相信息的传递.


Rabbit模式大概分为以下三种：单一模式、普通模式、镜像模式
单一模式：最简单的情况，非集群模式，即单实例服务。

普通模式：默认的集群模式。
queue创建之后，如果没有其它policy，则queue就会按照普通模式集群。对于Queue来说，消息实体只存在于其中一个节点，A、B两个节点仅有相同的元数据，即队列结构，但队列的元数据仅保存有一份，即创建该队列的rabbitmq节点（A节点），当A节点宕机，你可以去其B节点查看，./rabbitmqctl list_queues 发现该队列已经丢失，但声明的exchange还存在。
当消息进入A节点的Queue中后，consumer从B节点拉取时，RabbitMQ会临时在A、B间进行消息传输，把A中的消息实体取出并经过B发送给consumer。
所以consumer应尽量连接每一个节点，从中取消息。即对于同一个逻辑队列，要在多个节点建立物理Queue。否则无论consumer连A或B，出口总在A，会产生瓶颈。
该模式存在一个问题就是当A节点故障后，B节点无法取到A节点中还未消费的消息实体。
如果做了消息持久化，那么得等A节点恢复，然后才可被消费；如果没有持久化的话，队列数据就丢失了。

镜像模式：把需要的队列做成镜像队列，存在于多个节点，属于RabbitMQ的HA方案。
该模式解决了上述问题，其实质和普通模式不同之处在于，消息实体会主动在镜像节点间同步，而不是在consumer取数据时临时拉取。
该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉。
所以在对可靠性要求较高的场合中适用，一个队列想做成镜像队列，需要先设置policy，然后客户端创建队列的时候，rabbitmq集群根据“队列名称”自动设置是普通集群模式或镜像队列。具体如下：
队列通过策略来使能镜像。策略能在任何时刻改变，rabbitmq队列也近可能的将队列随着策略变化而变化；非镜像队列和镜像队列之间是有区别的，前者缺乏额外的镜像基础设施，没有任何slave，因此会运行得更快。
为了使队列称为镜像队列，你将会创建一个策略来匹配队列，设置策略有两个键“ha-mode和 ha-params（可选）”。

了解集群中的基本概念：
RabbitMQ的集群节点包括内存节点、磁盘节点。顾名思义内存节点就是将所有数据放在内存，磁盘节点将数据放在磁盘。不过，如前文所述，如果在投递消息时，打开了消息的持久化，那么即使是内存节点，数据还是安全的放在磁盘。
一个rabbitmq集群中可以共享user，vhost，queue，exchange等，所有的数据和状态都是必须在所有节点上复制的，一个例外是，那些当前只属于创建它的节点的消息队列，尽管它们可见且可被所有节点读取。rabbitmq节点可以动态的加入到集群中，一个节点它可以加入到集群中，也可以从集群环集群会进行一个基本的负载均衡。

集群中有两种节点：
1 内存节点：只保存状态到内存（一个例外的情况是：持久的queue的持久内容将被保存到disk）
2 磁盘节点：保存状态到内存和磁盘。
内存节点虽然不写入磁盘，但是它执行比磁盘节点要好。集群中，只需要一个磁盘节点来保存状态就足够了如果集群中只有内存节点，那么不能停止它们，否则所有的状态，消息等都会丢失。

RabitMQ的工作流程

对于RabbitMQ来说,除了这三个基本模块以外,还添加了一个模块,即交换机(Exchange).它使得生产者和消息队列之间产生了隔离,生产者将消息发送给交换机,而交换机则根据调度策略把相应的消息转发给对应的消息队列.那么RabitMQ的工作流程如下所示:

交换机的主要作用是接收相应的消息并且绑定到指定的队列.交换机有四种类型,分别为Direct,topic,headers,Fanout.
1).Direct是RabbitMQ默认的交换机模式,也是最简单的模式.即创建消息队列的时候,指定一个BindingKey.当发送者发送消息的时候,指定对应的Key.当Key和消息队列的BindingKey一致的时候,消息将会被发送到该消息队列中.
2).topic转发信息主要是依据通配符,队列和交换机的绑定主要是依据一种模式(通配符+字符串),而当发送消息的时候,只有指定的Key和该模式相匹配的时候,消息才会被发送到该消息队列中.
3).headers也是根据一个规则进行匹配,在消息队列和交换机绑定的时候会指定一组键值对规则,而发送消息的时候也会指定一组键值对规则,当两组键值对规则相匹配的时候,消息会被发送到匹配的消息队列中.
4).Fanout是路由广播的形式,将会把消息发给绑定它的全部队列,即便设置了key,也会被忽略.


二、RabbitMQ的安装

1.centos7中安装RabbitMQ
1).首先需要安装erlang
#rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
#yum install erlang
安装过程中会有提示，一路输入“y”即可。
2).完成后安装RabbitMQ：
先下载rpm：
#wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm
下载完成后安装：
#yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm
完成后启动服务：
#service rabbitmq-server start
可以查看服务状态：
#service rabbitmq-server status

三、RabbitMQ的配置
1.修改配置文件
通过查看服务状态：
#service rabbitmq-server status

这里可以看到log文件的位置，转到文件位置，打开文件：

这里显示的是没有找到配置文件，我们可以自己创建这个文件
#cd /etc/rabbitmq/
#vim rabbitmq.config
编辑内容如下：
[{rabbit, [{loopback_users, []}]}].
这里的意思是开放使用，rabbitmq默认创建的用户guest，密码也是guest，这个用户默认只能是本机访问，localhost或者127.0.0.1，从外部访问需要添加上面的配置。

保存配置后重启服务：
#service rabbitmq-server stop
#service rabbitmq-server start

2.安装插件
#/sbin/rabbitmq-plugins enable rabbitmq_management
重启rabbitmq服务
#service rabbitmq-server restart
到此,就可以通过http://ip:15672 使用guest,guest 进行登陆web页面了

四、RabbitMQ用户角色及权限控制
1.RabbitMQ的用户角色分类：
none、management、policymaker、monitoring、administrator
2.RabbitMQ各类角色描述：
none
不能访问 management plugin

management
用户可以通过AMQP做的任何事外加：
列出自己可以通过AMQP登入的virtual hosts
查看自己的virtual hosts中的queues, exchanges 和 bindings
查看和关闭自己的channels 和 connections
查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。

policymaker
management可以做的任何事外加：
查看、创建和删除自己的virtual hosts所属的policies和parameters

monitoring
management可以做的任何事外加：
列出所有virtual hosts，包括他们不能登录的virtual hosts
查看其他用户的connections和channels
查看节点级别的数据如clustering和memory使用情况
查看真正的关于所有virtual hosts的全局的统计信息

administrator
policymaker和monitoring可以做的任何事外加:
创建和删除virtual hosts
查看、创建和删除users
查看创建和删除permissions
关闭其他用户的connections

3.创建用户并设置角色：
可以创建管理员用户，负责整个MQ的运维，例如：
$sudo rabbitmqctl add_user  user_admin  passwd_admin
赋予其administrator角色：
$sudo rabbitmqctl set_user_tags user_admin administrator

可以创建RabbitMQ监控用户，负责整个MQ的监控，例如：
$sudo rabbitmqctl add_user  user_monitoring  passwd_monitor
赋予其monitoring角色：
$sudo rabbitmqctl set_user_tags user_monitoring monitoring

可以创建某个项目的专用用户，只能访问项目自己的virtual hosts
$sudo rabbitmqctl  add_user  user_proj  passwd_proj
赋予其monitoring角色：
$sudo rabbitmqctl set_user_tags user_proj management

创建和赋角色完成后查看并确认：
$sudo rabbitmqctl list_users

4.RabbitMQ权限控制
默认virtual host："/"
默认用户：guest
guest具有"/"上的全部权限，仅能有localhost访问RabbitMQ包括Plugin，建议删除或更改密码。可通过将配置文件中loopback_users置孔来取消其本地访问的限制：
[{rabbit, [{loopback_users, []}]}]

用户仅能对其所能访问的virtual hosts中的资源进行操作。这里的资源指的是virtual hosts中的exchanges、queues等，操作包括对资源进行配置、写、读。配置权限可创建、删除、资源并修改资源的行为，写权限可向资源发送消息，读权限从资源获取消息。比如：
exchange和queue的declare与delete分别需要exchange和queue上的配置权限
exchange的bind与unbind需要exchange的读写权限
queue的bind与unbind需要queue写权限exchange的读权限
发消息(publish)需exchange的写权限
获取或清除(get、consume、purge)消息需queue的读权限
对何种资源具有配置、写、读的权限通过正则表达式来匹配，具体命令如下：
set_permissions [-p <vhostpath>] <user> <conf> <write> <read>
其中，<conf> <write> <read>的位置分别用正则表达式来匹配特定的资源，如'^(amq\.gen.*|amq\.default)$'可以匹配server生成的和默认的exchange，'^$'不匹配任何资源

需要注意的是RabbitMQ会缓存每个connection或channel的权限验证结果、因此权限发生变化后需要重连才能生效。

为用户赋权：
$sudo rabbitmqctl  set_permissions -p /vhost1  user_admin '.*' '.*' '.*'
该命令使用户user_admin具有/vhost1这个virtual host中所有资源的配置、写、读权限以便管理其中的资源
查看权限:
$sudo rabbitmqctl list_user_permissions user_admin
Listing permissions for user "user_admin" ...
/vhost1<span style="white-space:pre"> </span>.*<span style="white-space:pre"> </span>.*<span style="white-space:pre"> </span>.*

$sudo rabbitmqctl list_permissions -p /vhost1
Listing permissions in vhost "/vhost1" ...
user_admin<span style="white-space:pre">  </span>.*<span style="white-space:pre"> </span>.*<span style="white-space:pre"> </span>.*



-javaagent:F:\DevelopmentInstall\IDEA_INSTALL\install\JetbrainsCrack.jar


-javaagent:F:\DevelopmentInstall\IDEA_INSTALL\install\IntelliJ IDEA 2018.1.6\bin\JetbrainsCrack-2.9-release-enc.jar




1.MyBlog 链接: https://pan.baidu.com/s/1aWBJYqqfIO9BjjcmuyMDWg 密码: akp6

2.Library 链接: https://pan.baidu.com/s/10ixZ-H8PGj6sQL6dz3C0mw 密码: bysb

3.SIM 链接: https://pan.baidu.com/s/1bSVBAhib0kz4KzPjj9wBsg 密码: 7i4i

4.CRM 链接: https://pan.baidu.com/s/13qNIsXOWN9vKSSAnV-RysA 密码: 6xf9

5.EasyBuy 链接: https://pan.baidu.com/s/1RoH6D4TlBus07SQyYMGaHQ 密码: 5dty

6.VoteSystem 链接: https://pan.baidu.com/s/1UqA-WGnx1ldprJxeKYfQ8g 密码: ftzf

7.SchoolShopping 链接: https://pan.baidu.com/s/1nbC_VUDLjuYUf9LG_OqOpw 密码: jt24

8.CMS 链接: https://pan.baidu.com/s/1iHRYWYNlHEue4FF30rzmpA 密码: 2t7y

9.Examination 链接: https://pan.baidu.com/s/1ZLsQ9KhajlnaDpl9RxBYFA 密码: rnx6

10.SSM+Shiro+redis权限管理 链接: https://pan.baidu.com/s/1GxJWKx56P0sOYlTNTVHQnA 密码: 7ktw
























划重点，修改配置文件：不能直接在bin目录下直接修改，先打开idea试用30天，然后点击你要注册的IDE菜单：“Help” -> “Edit Custom VM Options …”，如果提示是否要创建文件，请点"是|Yes"。
在打开的vmoptions编辑窗口末行添加：-javaagent:JetbrainsCrack.jar文件的绝对路径（一定要自己确认好路径，填错会导致IDE打不开！！！），不管是Mac、Linux、Windows都类似，都是绝对路径。

如我的路径: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\bin\JetbrainsCrack.jar

重新启动你的IDEA。
注册"Help" -> “Register”，选择License server方式，地址填入：http://jetbrains-license-server （应该会自动填上）
看到Licensed to 用户名，即激活成功






























